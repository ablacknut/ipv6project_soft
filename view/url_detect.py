# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\论文\恶意网站\项目\申请材料\1\url_detect.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PIL import Image
import os
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QDialog, QAction, QFileDialog, QMessageBox, QGraphicsPixmapItem, QGraphicsScene
from PyQt5.QtGui import QPixmap, QImage
import view.url_train
import view.help1
import view.help2
import sys
### 接口 self.url 为用户输入或文件上传的URL列表
### 接口 self.method 为用户选择的算法 0 表示串行
###                                  1 表示并行


class URLdetection(QMainWindow):
    def __init__(self, *argv):  ###
        super().__init__(*argv)
        self.upload = 0
        self.method = 0
        self.url = []
        self.fileURL = ''
        self.InitUI()

    def InitUI(self):
        self.setWindowTitle('URL检测')
        self.resize(821, 615)
        #URL输入框
        self.groupBox = QtWidgets.QGroupBox('URL输入', self)
        self.groupBox.setGeometry(QtCore.QRect(60, 30, 301, 91))
        #URL输入文本
        self.textEdit = QtWidgets.QTextEdit(self.groupBox)
        self.textEdit.setGeometry(QtCore.QRect(30, 20, 241, 51))
        self.textEdit.setPlaceholderText('example:www.baidu.com')
        #导入文件框
        self.groupBox_2 = QtWidgets.QGroupBox(self)
        self.groupBox_2.setGeometry(QtCore.QRect(420, 30, 301, 91))
        #文件选择按钮
        self.pushButton = QtWidgets.QPushButton('文件选择', self.groupBox_2)
        self.pushButton.setGeometry(QtCore.QRect(60, 30, 181, 41))
        self.pushButton.clicked.connect(self.btn_upload_clicked)
        #选择算法检测框
        self.groupBox_3 = QtWidgets.QGroupBox('选择算法检测', self)
        self.groupBox_3.setGeometry(QtCore.QRect(60, 130, 661, 61))
        #开始检测按钮
        self.pushButton_2 = QtWidgets.QPushButton('开始检测', self.groupBox_3)
        self.pushButton_2.setGeometry(QtCore.QRect(420, 20, 181, 31))
        self.pushButton_2.clicked.connect(self.btn_detect_clicked)
        #算法选择下拉框
        self.comboBox = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox.setGeometry(QtCore.QRect(10, 20, 321, 31))
        self.comboBox.addItem("双向独立循环网络与胶囊网络串行联合模型")
        self.comboBox.addItem("独立循环神经网络与胶囊网络并行联合模型")
        self.comboBox.currentIndexChanged[int].connect(self.select_method)
        #检测结果显示
        self.textBrowser = QtWidgets.QTextBrowser(self)
        self.textBrowser.setGeometry(QtCore.QRect(60, 210, 501, 121))
        #查看URL对应灰度图像框
        self.groupBox_4 = QtWidgets.QGroupBox('查看URL对应灰度图像', self)
        self.groupBox_4.setGeometry(QtCore.QRect(60, 360, 661, 171))
        #输入URL：
        self.label = QtWidgets.QLabel('输入URL', self.groupBox_4)
        self.label.setGeometry(QtCore.QRect(30, 50, 161, 31))

        #用户输入URL
        self.textEdit_1 = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEdit_1.setGeometry(QtCore.QRect(30, 80, 251, 41))

        #图片显示
        self.graphicsView = QtWidgets.QGraphicsView(self.groupBox_4)
        self.graphicsView.setGeometry(QtCore.QRect(450, 10, 181, 151))

        #查看灰度图像按钮
        self.pushButton_3 = QtWidgets.QPushButton('查看', self.groupBox_4)
        self.pushButton_3.setGeometry(QtCore.QRect(310, 80, 111, 41))
        self.pushButton_3.clicked.connect(self.show_picture)
        #导出结果文件按钮
        self.pushButton_4 = QtWidgets.QPushButton('导出文件', self)
        self.pushButton_4.setGeometry(QtCore.QRect(610, 240, 111, 51))
        self.pushButton_4.clicked.connect(self.export)
        #菜单栏

        self.menubar = self.menuBar()
        self.file = self.menubar.addMenu("功能")
        self.file.addAction(QAction('URL检测', self))
        self.file.addAction(QAction('训练模型', self))
        self.file.triggered[QAction].connect(self.processtrigger)
        self.file = self.menubar.addMenu("帮助")
        self.file.addAction(QAction('URL检测操作指南', self))
        self.file.addAction(QAction('模型训练操作指南', self))
        self.file.triggered[QAction].connect(self.processtrigger)
        self.statusBar()

    def closeEvent(self, event):
        self.hide()
        self.parent().show()

    #菜单栏跳转
    def processtrigger(self, i):
        if i.text() == "URL检测":
            # Ui_detection = URLdetection(self)
            # Ui_detection.show()  ###
            # Ui_detection.exec_()
            pass
        elif i.text() == "训练模型":
            Ui_train = view.url_train.Train(self.parent())
            Ui_train.show()  ###
            self.hide()
        elif i.text() == "URL检测操作指南":
            help = view.help1.detection_help(self)
            help.show()
        elif i.text() == "模型训练操作指南":
            help = view.help2.train_help(self)
            help.show()

    #检测按钮
    def btn_detect_clicked(self):
        #若用户未输入url或未上传文件，则告警
        if (len(self.textEdit.toPlainText())) == 0:
            msg_box = QMessageBox.warning(self, '警告', '请输入URL或上传文件')
            return
        #若用户输入了URL，则添加到self.url接口中
        elif len(self.textEdit.toPlainText()) != 0:
            self.url = self.textEdit.toPlainText().split("\n")
        #若用户上传了文件，则添加到self.url接口中
        self.statusBar().showMessage('正在检测')
        if self.method == 0:
            from algorithm import serial
            result = serial.predict_url(self.url)
        elif self.method == 1:
            from algorithm import parallel
            result = parallel.predict_url(self.url)
        self.textBrowser.append("检测结果")
        self.textBrowser.append(result)
        self.statusBar().showMessage('')

    #上传按钮
    def btn_upload_clicked(self):
        #打开文件界面
        fname, _ = QFileDialog.getOpenFileName(self, 'open file', '/', 'Txt files(*.txt)')
        #fname为文件名，_为文件类型
        if fname:
            with open(fname, 'r') as f:
                self.textEdit.append(f.read())

    #选择算法下拉框
    def select_method(self, i):
        #如果用户选择了第一个，则添加第一个到接口中
        if i == 0:
            self.method = 0
        else:
            self.method = 1

    #查看图片按钮
    def show_picture(self):
        # 将url转换为图片
        # with open("img\test.png", "rb") as f:
        #     img = f.read()
        # image = QImage.fromData(img)
        url = self.textEdit_1.toPlainText()
        url = url.encode().ljust(64, b'\x00')
        a = np.array([i for i in url])
        a = a.reshape((8, 8))
        im = Image.fromarray(a).convert('L')
        im = im.resize((140, 140), Image.NEAREST)
        img = np.array(im)
        x = img.shape[1]
        y = img.shape[0]
        frame = QImage(img, x, y, QImage.Format_Indexed8)
        pix = QPixmap.fromImage(frame)
        self.item = QGraphicsPixmapItem(pix)
        self.scene = QGraphicsScene()
        self.scene.addItem(self.item)
        self.graphicsView.setScene(self.scene)
        self.graphicsView.show()

    def export(self):
        filename = QFileDialog.getSaveFileName(self, 'save file', '/')
        if filename[0] != '':
            with open(filename[0], 'w') as f:
                txt = self.textBrowser.toPlainText()
                f.write(txt)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    UI = URLdetection()
    UI.show()
    sys.exit(app.exec_())